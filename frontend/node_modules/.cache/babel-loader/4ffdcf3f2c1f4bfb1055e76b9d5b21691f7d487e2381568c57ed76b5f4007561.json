{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signInWithPopup, signOut, sendPasswordResetEmail, updateProfile } from 'firebase/auth';\n\n// Firebase configuration from .env\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Authentication\nconst auth = getAuth(app);\nconst googleProvider = new GoogleAuthProvider();\n\n// Authentication Helper Functions\nconst firebaseAuthMethods = {\n  // Create user with email and password\n  createUser: async (email, password, displayName) => {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n\n      // Update profile with display name\n      if (displayName) {\n        await updateProfile(userCredential.user, {\n          displayName\n        });\n      }\n      return userCredential.user;\n    } catch (error) {\n      console.error('Firebase Signup Error:', error);\n      throw error;\n    }\n  },\n  // Sign in with email and password\n  signIn: async (email, password) => {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      return userCredential.user;\n    } catch (error) {\n      console.error('Firebase Login Error:', error);\n      throw error;\n    }\n  },\n  // Google Sign In\n  signInWithGoogle: async () => {\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      return result.user;\n    } catch (error) {\n      console.error('Google Sign In Error:', error);\n      throw error;\n    }\n  },\n  // Sign out\n  signOut: async () => {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      console.error('Firebase Signout Error:', error);\n      throw error;\n    }\n  },\n  // Password Reset\n  resetPassword: async email => {\n    try {\n      await sendPasswordResetEmail(auth, email);\n    } catch (error) {\n      console.error('Password Reset Error:', error);\n      throw error;\n    }\n  }\n};\nexport { app, auth, googleProvider, firebaseAuthMethods };","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signInWithPopup","signOut","sendPasswordResetEmail","updateProfile","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","app","auth","googleProvider","firebaseAuthMethods","createUser","email","password","displayName","userCredential","user","error","console","signIn","signInWithGoogle","result","resetPassword"],"sources":["S:/EXPENSE TRACKER/expense-tracker/frontend/src/config/firebaseConfig.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { \n  getAuth, \n  GoogleAuthProvider, \n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  signOut,\n  sendPasswordResetEmail,\n  updateProfile\n} from 'firebase/auth';\n\n// Firebase configuration from .env\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Authentication\nconst auth = getAuth(app);\nconst googleProvider = new GoogleAuthProvider();\n\n// Authentication Helper Functions\nconst firebaseAuthMethods = {\n  // Create user with email and password\n  createUser: async (email, password, displayName) => {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      \n      // Update profile with display name\n      if (displayName) {\n        await updateProfile(userCredential.user, { displayName });\n      }\n      \n      return userCredential.user;\n    } catch (error) {\n      console.error('Firebase Signup Error:', error);\n      throw error;\n    }\n  },\n\n  // Sign in with email and password\n  signIn: async (email, password) => {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      return userCredential.user;\n    } catch (error) {\n      console.error('Firebase Login Error:', error);\n      throw error;\n    }\n  },\n\n  // Google Sign In\n  signInWithGoogle: async () => {\n    try {\n      const result = await signInWithPopup(auth, googleProvider);\n      return result.user;\n    } catch (error) {\n      console.error('Google Sign In Error:', error);\n      throw error;\n    }\n  },\n\n  // Sign out\n  signOut: async () => {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      console.error('Firebase Signout Error:', error);\n      throw error;\n    }\n  },\n\n  // Password Reset\n  resetPassword: async (email) => {\n    try {\n      await sendPasswordResetEmail(auth, email);\n    } catch (error) {\n      console.error('Password Reset Error:', error);\n      throw error;\n    }\n  }\n};\n\nexport { \n  app, \n  auth, \n  googleProvider, \n  firebaseAuthMethods \n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}